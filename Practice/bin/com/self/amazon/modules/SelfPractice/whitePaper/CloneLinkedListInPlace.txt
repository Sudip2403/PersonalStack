
class Node{
	int val;
	Node next;
	Node random;

	public Node(int val, Node next){
		this.val = val;
		this.next = next;
	}
	
	public void setRandom(Node random){
		this.random = random;
	}
	
	public Node getRandom(){
		return random;
	}
}


public class CloneLinkedListInPlace{

	public static void main(String[] args){
		Node n4 = new Node(4, null);
		Node n3 = new Node(3, n4);
		Node n2 = new Node(2, n3);
		Node head = new Node(1, n2);
		
		Node n = head;
		
		while(n != null){
			System.out.print("->" + n.val + "(" +  n.random + ")");
		}
		
		Node c = clone(head);
		
		System.out.print("-------After Clone-----------------");
		while(n != null){
			System.out.print("->" + n.val + "(" +  n.random + ")");
		}
	}

	private static Node clone(Node n){
		
		if(n == null) return null;
		
		Node node = n;
		
		//insert new nodes
		while(node != null){
			Node ne = node.next;
			Node n = copyNode(node);
			node.next = n;
			n.next = ne;
			if(node.next != null)
				node = node.next.next;
			else
				node = node.next;
		}
		
		//move the random pointers of the new nodes
		node = n;
		while(node != null){
			Node r = node.random;
			Node rn = r.next;
			node.random = rn;
			node = node.next;
		}
		
		// pick up only the new nodes
		node = n.next;
		Node head = node;
		
		while(node != null && node.next != null){
			Node p = node.next.next;
			node.next = p;
			node = node.next.next;
		}
		
		return head;
	}
	
	
	private Node copyNode(Node node){
		Node newNode = new Node(node.val + "*", null);
		newNode.random = node.random;
		return node;
	}

}